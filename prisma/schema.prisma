// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  INVESTOR
  PARTNER
  ADMIN
  DEAL_MANAGER
  FINANCIAL_OFFICER
  PORTFOLIO_ADVISOR
}

enum PermissionType {
  READ_DEALS
  WRITE_DEALS
  DELETE_DEALS
  READ_USERS
  WRITE_USERS
  DELETE_USERS
  READ_TRANSACTIONS
  WRITE_TRANSACTIONS
  READ_INVESTMENTS
  WRITE_INVESTMENTS
  MANAGE_ROLES
  MANAGE_PARTNERS
  VIEW_ANALYTICS
  SYSTEM_SETTINGS
}

enum ProjectStatus {
  DRAFT
  PENDING
  PUBLISHED
  ACTIVE
  PAUSED
  FUNDED
  COMPLETED
  CANCELLED
}

enum InvestmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  INVESTMENT
  RETURN
  FEE
  COMMISSION
}

enum ApplicationStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
}

model User {
  id                String        @id @default(cuid())
  email             String        @unique
  name              String?
  image             String?
  password          String?
  role              UserRole      @default(INVESTOR)
  emailVerified     DateTime?
  isActive          Boolean       @default(true)
  
  // Profile information
  phone             String?
  address           String?
  dateOfBirth       DateTime?
  kycVerified       Boolean       @default(false)
  
  // Password reset
  resetToken        String?
  resetTokenExpiry  DateTime?
  
  // Financial
  walletBalance     Decimal       @default(0) @db.Decimal(15, 2)
  totalInvested     Decimal       @default(0) @db.Decimal(15, 2)
  totalReturns      Decimal       @default(0) @db.Decimal(15, 2)
  
  // Relationships
  accounts          Account[]
  sessions          Session[]
  projects          Project[]
  investments       Investment[]
  transactions      Transaction[]
  notifications     Notification[]
  partnerReviews    PartnerReview[] @relation("PartnerReviews")
  permissions       UserPermission[]
  assignedInvestors UserInvestorAssignment[] @relation("PortfolioAdvisor")
  advisorFor        UserInvestorAssignment[] @relation("AssignedInvestor")
  reviewedApplications UserApplication[] @relation("ApplicationReviewer")
  profitDistributions ProfitDistribution[] @relation("ProfitDistributions")
  
  // Profit distribution requests
  profitDistributionRequests ProfitDistributionRequest[] @relation("ProfitDistributionRequests")
  reviewedProfitDistributions ProfitDistributionRequest[] @relation("ProfitDistributionReviews")
  
  // Financial relationships
  budgets           Budget[]
  requestedBudgets  BudgetRequest[] @relation("BudgetRequestedBy")
  processedBudgets  BudgetRequest[] @relation("BudgetProcessedBy")
  revenueStreams    RevenueStream[]
  financialReports  FinancialReport[]
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Partner relationship
  partner           Partner?
  
  @@map("users")
}

model UserApplication {
  id              String            @id @default(cuid())
  
  // Personal Information
  firstName       String
  lastName        String
  email           String            @unique
  phone           String
  dateOfBirth     DateTime
  
  // Address
  address         String
  city            String
  country         String
  postalCode      String?
  
  // Identity & KYC
  nationalId      String
  occupation      String
  employerName    String?
  monthlyIncome   Decimal?          @db.Decimal(15, 2)
  
  // Investment Profile
  investmentExperience String        // Beginner, Intermediate, Advanced
  riskTolerance   String            // Low, Medium, High  
  investmentGoals String            @db.Text
  initialInvestment Decimal?        @db.Decimal(15, 2)
  
  // Application Status
  status          ApplicationStatus @default(PENDING)
  rejectionReason String?           @db.Text
  reviewedBy      String?
  reviewedAt      DateTime?
  reviewer        User?             @relation("ApplicationReviewer", fields: [reviewedBy], references: [id])
  
  // Documents (URLs/paths to uploaded files)
  documents       Json?             // Store document URLs and types
  
  // Additional Information
  notes           String?           @db.Text
  agreeToTerms    Boolean           @default(false)
  marketingConsent Boolean          @default(false)
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("user_applications")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Project {
  id               String        @id @default(cuid())
  title            String
  description      String        @db.Text
  category         String
  location         String?
  
  // Financial details
  fundingGoal      Decimal       @db.Decimal(15, 2)
  currentFunding   Decimal       @default(0) @db.Decimal(15, 2)
  minInvestment    Decimal       @db.Decimal(15, 2)
  expectedReturn   Decimal       @db.Decimal(5, 2) // Percentage
  duration         Int           // In days
  riskLevel        String?       // LOW, MEDIUM, HIGH
  
  // Status and dates
  status           ProjectStatus @default(DRAFT)
  startDate        DateTime?
  endDate          DateTime?
  publishedAt      DateTime?
  pausedAt         DateTime?
  
  // Media and documents
  images           String[]
  documents        String[]
  thumbnailImage   String?       // Main display image
  
  // Additional details
  highlights       String[]      // Key selling points
  tags             String[]      // For filtering/searching
  timeline         Json?         // Project timeline and milestones
  
  // SEO and visibility
  slug             String?       @unique
  featured         Boolean       @default(false)
  priority         Int           @default(0)
  
  // Owner information
  ownerId          String
  owner            User          @relation(fields: [ownerId], references: [id])
  
  // Partner information
  partnerId        String?
  partner          Partner?      @relation(fields: [partnerId], references: [id])
  
  // Admin/Moderation
  approvedBy       String?
  approvedAt       DateTime?
  rejectedReason   String?
  
  // Relationships
  investments      Investment[]
  reviews          PartnerReview[]
  dealPerformances DealPerformance[]
  profitDistributions ProfitDistribution[]
  profitDistributionRequests ProfitDistributionRequest[] @relation("ProfitDistributionRequests")
  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  @@map("projects")
}

model Investment {
  id               String           @id @default(cuid())
  amount           Decimal          @db.Decimal(15, 2)
  status           InvestmentStatus @default(PENDING)
  expectedReturn   Decimal          @db.Decimal(15, 2)
  actualReturn     Decimal          @default(0) @db.Decimal(15, 2)
  
  // Relationships
  investorId       String
  investor         User             @relation(fields: [investorId], references: [id])
  projectId        String
  project          Project          @relation(fields: [projectId], references: [id])
  transactions     Transaction[]
  profitDistributions ProfitDistribution[]
  
  // Tracking
  investmentDate   DateTime         @default(now())
  lastReturnDate   DateTime?
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  @@map("investments")
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

model Transaction {
  id               String            @id @default(cuid())
  amount           Decimal           @db.Decimal(15, 2)
  type             TransactionType
  status           TransactionStatus @default(PENDING)
  description      String?
  reference        String?           @unique
  method           String?           // card, bank, cash
  notes            String?           @db.Text
  
  // Relationships
  userId           String
  user             User              @relation(fields: [userId], references: [id])
  investmentId     String?
  investment       Investment?       @relation(fields: [investmentId], references: [id])
  profitDistributions ProfitDistribution[]
  
  // Metadata
  metadata         Json?
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  @@map("transactions")
}

model Notification {
  id               String          @id @default(cuid())
  title            String
  message          String          @db.Text
  type             String          // info, success, warning, error, push
  read             Boolean         @default(false)
  metadata         String?         @db.Text // JSON string for additional data
  
  // Relationships
  userId           String
  user             User            @relation(fields: [userId], references: [id])
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@map("notifications")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum PartnerStatus {
  ACTIVE
  PENDING
  SUSPENDED
  INACTIVE
}

enum PartnerTier {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

model Partner {
  id               String          @id @default(cuid())
  
  // Partner information
  companyName      String
  contactName      String?
  description      String?         @db.Text
  logo             String?
  website          String?
  phone            String?
  address          String?
  industry         String?
  
  // Status and tier
  status           PartnerStatus   @default(PENDING)
  tier             PartnerTier     @default(BRONZE)
  
  // Performance metrics
  totalDeals       Int             @default(0)
  completedDeals   Int             @default(0)
  totalFunding     Decimal         @default(0) @db.Decimal(15, 2)
  totalCommission  Decimal         @default(0) @db.Decimal(15, 2)
  averageReturn    Decimal?        @db.Decimal(5, 2)
  successRate      Decimal         @default(0) @db.Decimal(5, 2)
  rating           Decimal         @default(0) @db.Decimal(3, 2)
  totalRatings     Int             @default(0)
  
  // Documents
  businessLicense  Boolean         @default(false)
  taxCertificate   Boolean         @default(false)
  bankDetails      Boolean         @default(false)
  partnershipAgreement Boolean     @default(false)
  
  // Activity tracking
  lastActive       DateTime?
  joinedAt         DateTime        @default(now())
  
  // Relationships
  userId           String          @unique
  user             User            @relation(fields: [userId], references: [id])
  projects         Project[]
  reviews          PartnerReview[]
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@map("partners")
}

model PartnerReview {
  id               String          @id @default(cuid())
  rating           Int             // 1-5 stars
  comment          String?         @db.Text
  
  // Relationships
  partnerId        String
  partner          Partner         @relation(fields: [partnerId], references: [id])
  investorId       String
  investor         User            @relation("PartnerReviews", fields: [investorId], references: [id])
  projectId        String
  project          Project         @relation(fields: [projectId], references: [id])
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@unique([partnerId, investorId, projectId])
  @@map("partner_reviews")
}

model UserPermission {
  id               String          @id @default(cuid())
  userId           String
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission       PermissionType
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@unique([userId, permission])
  @@map("user_permissions")
}

model UserInvestorAssignment {
  id               String          @id @default(cuid())
  
  advisorId        String
  advisor          User            @relation("PortfolioAdvisor", fields: [advisorId], references: [id])
  investorId       String
  investor         User            @relation("AssignedInvestor", fields: [investorId], references: [id])
  
  isActive         Boolean         @default(true)
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@unique([advisorId, investorId])
  @@map("user_investor_assignments")
}



enum BudgetStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}



model Budget {
  id           String        @id @default(cuid())
  name         String
  description  String?
  category     String        // operational, marketing, technology, etc.
  
  // Budget amounts
  allocated    Float
  spent        Float         @default(0)
  remaining    Float         @default(0)
  
  // Period
  startDate    DateTime
  endDate      DateTime
  
  status       BudgetStatus  @default(DRAFT)
  
  // Relationships
  createdBy    String
  createdByUser User         @relation(fields: [createdBy], references: [id])
  
  // Budget requests
  requests     BudgetRequest[]
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@map("budgets")
}

model BudgetRequest {
  id           String        @id @default(cuid())
  department   String
  purpose      String
  amount       Float
  priority     String        @default("medium") // low, medium, high
  
  status       RequestStatus @default(PENDING)
  notes        String?
  
  // Relationships
  budgetId     String?
  budget       Budget?       @relation(fields: [budgetId], references: [id])
  
  requestedBy  String
  requestedByUser User       @relation("BudgetRequestedBy", fields: [requestedBy], references: [id])
  
  processedBy  String?
  processedByUser User?      @relation("BudgetProcessedBy", fields: [processedBy], references: [id])
  processedAt  DateTime?
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  @@map("budget_requests")
}

model RevenueStream {
  id           String   @id @default(cuid())
  name         String
  category     String   // Transaction Fees, Asset Management, etc.
  description  String?
  
  // Targets and actuals
  targetAmount Float
  actualAmount Float    @default(0)
  
  // Configuration
  isActive     Boolean  @default(true)
  
  // Relationships
  createdBy    String
  createdByUser User    @relation(fields: [createdBy], references: [id])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("revenue_streams")
}

model FinancialReport {
  id           String   @id @default(cuid())
  title        String
  type         String   // monthly, quarterly, annual, custom
  description  String?
  
  // Report data (JSON)
  data         Json
  
  // Period
  startDate    DateTime
  endDate      DateTime
  
  // File information
  fileName     String?
  fileUrl      String?
  fileSize     Int?
  
  // Relationships
  generatedBy  String
  generatedByUser User  @relation(fields: [generatedBy], references: [id])
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("financial_reports")
}

// Deal Performance Tracking
model DealPerformance {
  id               String          @id @default(cuid())
  
  // Performance metrics
  date             DateTime        @default(now())
  dailyProfit      Decimal         @db.Decimal(15, 2)
  cumulativeProfit Decimal         @db.Decimal(15, 2)
  profitMargin     Decimal         @db.Decimal(5, 2) // Percentage
  dailyReturn      Decimal         @db.Decimal(5, 2) // Percentage
  fundingProgress  Decimal         @db.Decimal(5, 2) // Percentage
  
  // Relationships
  projectId        String
  project          Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@map("deal_performances")
}

// Profit Distribution System
model ProfitDistribution {
  id               String          @id @default(cuid())
  
  // Distribution details
  amount           Decimal         @db.Decimal(15, 2)
  distributionDate DateTime        @default(now())
  profitPeriod     String          // "daily", "monthly", "quarterly"
  status           String          @default("PENDING") // PENDING, COMPLETED, FAILED
  
  // Calculation details
  profitRate       Decimal         @db.Decimal(5, 2) // Percentage
  investmentShare  Decimal         @db.Decimal(5, 2) // Percentage of total investment
  
  // Relationships
  investmentId     String
  investment       Investment      @relation(fields: [investmentId], references: [id], onDelete: Cascade)
  projectId        String
  project          Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  investorId       String
  investor         User            @relation("ProfitDistributions", fields: [investorId], references: [id])
  
  // Transaction reference
  transactionId    String?
  transaction      Transaction?    @relation(fields: [transactionId], references: [id])
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@map("profit_distributions")
}

model ProfitDistributionRequest {
  id               String          @id @default(cuid())
  
  // Request details
  projectId        String
  project          Project         @relation("ProfitDistributionRequests", fields: [projectId], references: [id], onDelete: Cascade)
  partnerId        String
  partner          User            @relation("ProfitDistributionRequests", fields: [partnerId], references: [id])
  
  // Distribution details
  totalAmount      Decimal         @db.Decimal(15, 2)
  distributionData Json            // Stores the distribution breakdown
  description      String?         @db.Text
  
  // Status and approval
  status           String          @default("PENDING") // PENDING, APPROVED, REJECTED
  reviewedBy       String?
  reviewer         User?           @relation("ProfitDistributionReviews", fields: [reviewedBy], references: [id])
  reviewedAt       DateTime?
  rejectionReason  String?         @db.Text
  
  // Timestamps
  requestedAt      DateTime        @default(now())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  
  @@map("profit_distribution_requests")
}
